# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ob5cQCb16bn-fbEINlFR9pJiNpa5RM8i
"""

import numpy as np
import pandas as pd
from youtube_comment_downloader import YoutubeCommentDownloader
from model import preprocess_data
from prediction import display_sentiment_plot

link = input("YouTube link: ")
saved = './data/youtube_comment_file'

# Download YouTube comments
def download_comments(youtube_link, save_path):
    youtube = YoutubeCommentDownloader()
    video_id_match = re.search(r'v=([a-zA-Z0-9_-]+)', youtube_link)

    if video_id_match:
        video_id = video_id_match.group(1)
    else:
        print("Invalid YouTube link. Please provide a valid link.")
        exit()

    response = youtube.get_comments(youtube_id=video_id)

    all_data = []
    for i, comment in enumerate(response):
        all_data.append(comment)
        if i >= 100:  # Limiting to the first 100 comments for simplicity
            break

    df = pd.DataFrame(all_data)
    df.to_csv(save_path, index=False)

download_comments(link, saved)

# Load the data
data = pd.read_csv(saved)

# Perform sentiment analysis and save the plot
processed_data = preprocess_data(data)

# Assuming the code for generating the sentiment plot is here
sns.set(style="whitegrid")
fig, ax = plt.subplots(figsize=(8, 6))
sentiment_counts = processed_data['Sentiment'].value_counts()
colors = sns.color_palette("pastel", len(sentiment_counts))
ax.bar(sentiment_counts.index.map({0: 'Negative', 1: 'Neutral', 2: 'Positive'}), sentiment_counts.values, color=colors)
ax.set_xlabel('Sentiment')
ax.set_ylabel('Number of Comments')
ax.set_title('Distribution of Sentiment Classes after Upsampling')
plt.savefig('sentiment_distribution.png')

# Display the sentiment analysis plot using Streamlit
display_sentiment_plot()